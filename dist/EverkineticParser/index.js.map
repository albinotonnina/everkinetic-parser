{"version":3,"sources":["../../src/EverkineticParser/index.js"],"names":["fs","require","EverkineticParser","fetcher","homeDocumentFactory","pageDocumentFactory","exerciseDocumentFactory","getTotalPages","then","getPages","totalPages","getExercises","exerciseUrls","writeOutputToJSON","exercises","parsePhotos","downloadPhotos","pageNumberExtractor","extract","pageExtractor","exerciseExtractor","photos","photosExtractor","photosDownloader","download","output","outputFilename","writeFile","JSON","stringify","err","console","log"],"mappings":";;;;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AATA,IAAIA,KAAKC,QAAQ,IAAR,CAAT;;IAWaC,iB,WAAAA,iB;AAET,iCAAc;AAAA;;AACV,aAAKC,OAAL,GAAe,sBAAf;AACA,aAAKC,mBAAL,GAA2B,8CAA3B;AACA,aAAKC,mBAAL,GAA2B,8CAA3B;AACA,aAAKC,uBAAL,GAA+B,sDAA/B;AACH;;;;gCAEO;AAAA;;AACJ,mBAAO,KAAKC,aAAL,GACFC,IADE,CACG;AAAA,uBAAc,MAAKC,QAAL,CAAcC,UAAd,CAAd;AAAA,aADH,EAEFF,IAFE,CAEG;AAAA,uBAAgB,MAAKG,YAAL,CAAkBC,YAAlB,CAAhB;AAAA,aAFH,EAGFJ,IAHE,CAGG;AAAA,uBAAa,MAAKK,iBAAL,CAAuBC,SAAvB,CAAb;AAAA,aAHH,EAIFN,IAJE,CAIG;AAAA,uBAAa,MAAKO,WAAL,CAAiBD,SAAjB,CAAb;AAAA,aAJH,EAKFN,IALE,CAKG;AAAA,uBAAa,MAAKQ,cAAL,CAAoBF,SAApB,CAAb;AAAA,aALH,CAAP;AAOH;;;wCAEe;AACZ,gBAAMG,sBAAsB,6CAAwB,KAAKd,OAA7B,EAAsC,KAAKC,mBAA3C,CAA5B;AACA,mBAAOa,oBAAoBC,OAApB,EAAP;AACH;;;iCAEQR,U,EAAY;AACjB,gBAAMS,gBAAgB,iCAAkBT,UAAlB,EAA8B,KAAKP,OAAnC,EAA4C,KAAKE,mBAAjD,CAAtB;AACA,mBAAOc,cAAcD,OAAd,EAAP;AACH;;;qCAEYN,Y,EAAc;AACvB,gBAAMQ,oBAAoB,yCAAsBR,YAAtB,EAAoC,KAAKT,OAAzC,EAAkD,KAAKG,uBAAvD,CAA1B;AACA,mBAAOc,kBAAkBF,OAAlB,EAAP;AACH;;;oCAEWG,M,EAAQ;AAChB,gBAAMC,kBAAkB,qCAAoBD,MAApB,CAAxB;AACA,mBAAOC,gBAAgBJ,OAAhB,EAAP;AACH;;;uCAEcG,M,EAAQ;AACnB,gBAAME,mBAAmB,uCAAqBF,MAArB,CAAzB;AACA,mBAAOE,iBAAiBC,QAAjB,EAAP;AACH;;;0CAEiBC,M,EAAQ;AACtB,gBAAMC,iBAAiB,uBAAvB;AACA1B,eAAG2B,SAAH,CAAaD,cAAb,EAA6BE,KAAKC,SAAL,CAAeJ,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAA7B,EAA8D,eAAO;AACjE,oBAAIK,GAAJ,EAAS;AACLC,4BAAQC,GAAR,CAAYF,GAAZ;AACH,iBAFD,MAEO;AACHC,4BAAQC,GAAR,oBAA6BN,cAA7B;AACH;AACJ,aAND;;AAQA,mBAAOD,MAAP;AACH","file":"index.js","sourcesContent":["var fs = require('fs');\nimport {Fetcher} from './Fetcher';\nimport {PageNumberExtractor} from './extractors/PageNumberExtractor';\nimport {PageExtractor} from './extractors/PageExtractor';\nimport {ExerciseExtractor} from './extractors/ExerciseExtractor';\nimport {PhotosExtractor} from './extractors/PhotosExtractor';\nimport {PhotosDownloader} from './PhotosDownloader';\nimport {HomeDocumentFactory} from './factories/HomeDocumentFactory';\nimport {PageDocumentFactory} from './factories/PageDocumentFactory';\nimport {ExerciseDocumentFactory} from './factories/ExerciseDocumentFactory';\n\nexport class EverkineticParser {\n\n    constructor() {\n        this.fetcher = new Fetcher();\n        this.homeDocumentFactory = new HomeDocumentFactory();\n        this.pageDocumentFactory = new PageDocumentFactory();\n        this.exerciseDocumentFactory = new ExerciseDocumentFactory();\n    }\n\n    crawl() {\n        return this.getTotalPages()\n            .then(totalPages => this.getPages(totalPages))\n            .then(exerciseUrls => this.getExercises(exerciseUrls))\n            .then(exercises => this.writeOutputToJSON(exercises))\n            .then(exercises => this.parsePhotos(exercises))\n            .then(exercises => this.downloadPhotos(exercises))\n\n    }\n\n    getTotalPages() {\n        const pageNumberExtractor = new PageNumberExtractor(this.fetcher, this.homeDocumentFactory);\n        return pageNumberExtractor.extract();\n    }\n\n    getPages(totalPages) {\n        const pageExtractor = new PageExtractor(totalPages, this.fetcher, this.pageDocumentFactory);\n        return pageExtractor.extract();\n    }\n\n    getExercises(exerciseUrls) {\n        const exerciseExtractor = new ExerciseExtractor(exerciseUrls, this.fetcher, this.exerciseDocumentFactory);\n        return exerciseExtractor.extract();\n    }\n\n    parsePhotos(photos) {\n        const photosExtractor = new PhotosExtractor(photos);\n        return photosExtractor.extract();\n    }\n\n    downloadPhotos(photos) {\n        const photosDownloader = new PhotosDownloader(photos);\n        return photosDownloader.download();\n    }\n\n    writeOutputToJSON(output) {\n        const outputFilename = 'exercises-output.json';\n        fs.writeFile(outputFilename, JSON.stringify(output, null, 4), err => {\n            if (err) {\n                console.log(err);\n            } else {\n                console.log(`JSON saved to ${outputFilename}`);\n            }\n        });\n\n        return output;\n    }\n}\n"]}