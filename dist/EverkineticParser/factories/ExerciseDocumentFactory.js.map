{"version":3,"sources":["../../../src/EverkineticParser/factories/ExerciseDocumentFactory.js"],"names":["ExerciseDocument","$","exerciseObject","title","getExerciseTitle","slug","slugify","description","getExerciseDescription","taxonomies","getExerciseTaxonomies","steps","getExerciseSteps","images","getExerciseImages","find","text","children","first","each","index","element","splitFields","attr","replace","url","split","Array","isArray","push","smallFormat","mediumFormat","largeFormat","imageUrls","eq","filename","toString","toLowerCase","ExerciseDocumentFactory"],"mappings":"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","file":"ExerciseDocumentFactory.js","sourcesContent":["export class ExerciseDocument {\n\n    constructor($) {\n        this.$ = $;\n    }\n\n    extract() {\n\n        const exerciseObject = {};\n\n        exerciseObject.title = this.getExerciseTitle();\n        exerciseObject.slug = this.slugify(exerciseObject.title);\n        exerciseObject.description = this.getExerciseDescription();\n        exerciseObject.taxonomies = this.getExerciseTaxonomies();\n        exerciseObject.steps = this.getExerciseSteps();\n        exerciseObject.images = this.getExerciseImages(exerciseObject);\n\n        return exerciseObject;\n    }\n\n    getExerciseTitle() {\n        return this.$('.entry-title').find('a').text();\n    }\n\n    getExerciseDescription() {\n        return this.$('.exercise-entry-content').children().first().text();\n    }\n\n    getExerciseTaxonomies() {\n        const taxonomies = {};\n\n        this.$('.exercise-taxonomies').find('a').each((index, element) => {\n            const splitFields = this.$(element).attr('href').replace(`${this.url}/`, '').split('/');\n\n            if (splitFields[0] === 'equipment') {\n                if (Array.isArray(taxonomies[splitFields[0]])) {\n                    taxonomies[splitFields[0]].push(splitFields[1]);\n                } else {\n                    taxonomies[splitFields[0]] = [splitFields[1]];\n                }\n\n            } else {\n                taxonomies[splitFields[0]] = splitFields[1];\n            }\n\n        });\n\n        return taxonomies;\n    }\n\n    getExerciseSteps() {\n\n        let steps = [];\n\n        this.$('.exercise-entry-content').find('ol').children().each((index, element) => {\n            steps.push(this.$(element).text())\n        });\n\n        return steps;\n    }\n\n    getExerciseImages(exerciseObject) {\n\n        const smallFormat = 0, mediumFormat = 1, largeFormat= 2; //some large images are not available while medium are\n\n        let imageUrls = [];\n\n        this.$('.download-exercise-images').children().eq(mediumFormat).find('a').each((index, element) => {\n\n            imageUrls.push({\n                url: this.$(element).attr('href'),\n                filename: `${exerciseObject.slug}-${index}.png`\n            });\n\n        });\n\n        return imageUrls;\n    }\n\n    slugify(text) {\n        return text.toString().toLowerCase()\n            .replace(/\\s+/g, '-')           // Replace spaces with -\n            .replace(/[^\\w\\-]+/g, '')       // Remove all non-word chars\n            .replace(/\\-\\-+/g, '-')         // Replace multiple - with single -\n            .replace(/^-+/, '')             // Trim - from start of text\n            .replace(/-+$/, '');            // Trim - from end of text\n    }\n\n}\n\nexport class ExerciseDocumentFactory {\n    get($) {\n        return new ExerciseDocument($);\n    }\n}"]}