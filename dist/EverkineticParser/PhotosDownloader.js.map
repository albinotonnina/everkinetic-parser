{"version":3,"sources":["../../src/EverkineticParser/PhotosDownloader.js"],"names":["request","require","fs","PhotosDownloader","photos","imagePath","mkdirSyncRecursive","readFile","length","file","shift","uri","url","filename","console","log","head","err","res","body","headers","pipe","createWriteStream","on","callback","directory","path","replace","split","i","segment","slice","join","existsSync","mkdirSync"],"mappings":";;;;;;;;;;AACA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,KAAKD,QAAQ,IAAR,CAAX;;IAGaE,gB,WAAAA,gB;AAET,8BAAYC,MAAZ,EAAoB;AAAA;;AAChB,aAAKA,MAAL,GAAcA,MAAd;AACA,aAAKC,SAAL,GAAiB,4BAAjB;AACA,aAAKC,kBAAL,CAAwB,KAAKD,SAA7B;AACH;;;;mCAEU;AAAA;;AAEP,gBAAME,WAAW,SAAXA,QAAW,WAAY;AACzB,oBAAI,MAAKH,MAAL,CAAYI,MAAZ,GAAqB,CAAzB,EAA4B;AAAA;AACxB,4BAAIC,OAAO,MAAKL,MAAL,CAAYM,KAAZ,EAAX;AAAA,4BACIC,MAAMF,KAAKG,GADf;AAAA,4BAEIC,WAAW,MAAKR,SAAL,GAAeI,KAAKI,QAFnC;AAGAC,gCAAQC,GAAR,CAAY,gCAAgCF,QAA5C;;AAEAb,gCAAQgB,IAAR,CAAaL,GAAb,EAAkB,UAAUM,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;;AAExC,gCAAIF,OAAO,CAACC,GAAZ,EAAiB;AACbJ,wCAAQC,GAAR,CAAY,QAAZ,EAAsBE,GAAtB;AACA;AACH;;AAED,gCAAIC,IAAIE,OAAJ,CAAY,gBAAZ,MAAkC,CAAlC,IAAuCF,IAAIE,OAAJ,CAAY,cAAZ,MAAgC,WAA3E,EAAwF;AACpFN,wCAAQC,GAAR,CAAY,mBAAZ,EAAiCF,QAAjC;AACA;AACH;;AAEDb,oCAAQW,GAAR,EAAaU,IAAb,CAAkBnB,GAAGoB,iBAAH,CAAqBT,QAArB,CAAlB,EAAkDU,EAAlD,CAAqD,OAArD,EAA8D,YAAM;;AAEhEhB,yCAASiB,QAAT;AACH,6BAHD;AAKH,yBAjBD;AANwB;AAyB3B,iBAzBD,MAyBO;AACHA;AACH;AACJ,aA7BD;;AA+BAjB,qBAAS,YAAY;AACjBO,wBAAQC,GAAR,CAAY,+CAAZ;AACH,aAFD;AAGH;;;2CAEkBU,S,EAAW;AAC1B,gBAAIC,OAAOD,UAAUE,OAAV,CAAkB,KAAlB,EAAyB,EAAzB,EAA6BC,KAA7B,CAAmC,GAAnC,CAAX;;AAEA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,KAAKH,KAAKlB,MAA1B,EAAkCqB,GAAlC,EAAuC;AACnC,oBAAIC,UAAUJ,KAAKK,KAAL,CAAW,CAAX,EAAcF,CAAd,EAAiBG,IAAjB,CAAsB,GAAtB,CAAd;AACA,iBAAC9B,GAAG+B,UAAH,CAAcH,OAAd,CAAD,GAA0B5B,GAAGgC,SAAH,CAAaJ,OAAb,CAA1B,GAAkD,IAAlD;AACH;AACJ","file":"PhotosDownloader.js","sourcesContent":["\nconst request = require('request');\nconst fs = require('fs');\n\n\nexport class PhotosDownloader {\n\n    constructor(photos) {\n        this.photos = photos;\n        this.imagePath = './assets/exercises/images/';\n        this.mkdirSyncRecursive(this.imagePath);\n    }\n\n    download() {\n\n        const readFile = callback => {\n            if (this.photos.length > 0) {\n                let file = this.photos.shift(),\n                    uri = file.url,\n                    filename = this.imagePath+file.filename;\n                console.log('Downloading exercise image ' + filename);\n\n                request.head(uri, function (err, res, body) {\n\n                    if (err || !res) {\n                        console.log('no res', err);\n                        return;\n                    }\n\n                    if (res.headers['content-length'] === 0 || res.headers['content-type'] !== 'image/png') {\n                        console.log('no data for image', filename);\n                        return;\n                    }\n\n                    request(uri).pipe(fs.createWriteStream(filename)).on('close', () => {\n\n                        readFile(callback);\n                    });\n\n                });\n\n            } else {\n                callback();\n            }\n        };\n\n        readFile(function () {\n            console.log('There are no more exercise images to download');\n        });\n    }\n\n    mkdirSyncRecursive(directory) {\n        let path = directory.replace(/\\/$/, '').split('/');\n\n        for (let i = 1; i <= path.length; i++) {\n            let segment = path.slice(0, i).join('/');\n            !fs.existsSync(segment) ? fs.mkdirSync(segment) : null;\n        }\n    }\n}"]}