{"version":3,"sources":["../src/EverkineticParser.js"],"names":["request","require","fs","cheerio","rp","EverkineticParser","url","imagePath","mkdirSyncRecursive","rpOptions","uri","simple","transform","body","load","console","log","Promise","resolve","reject","getTotalPages","then","output","totalPages","pages","getPagesExercises","getPhotos","writeOutputToJSON","catch","err","statusCode","$","Number","not","last","text","pagePromises","i","push","getExercisesForPage","all","exercisesUrls","values","reduce","a","b","concat","parseExercises","pageNum","pageExercisesUrls","each","find","attr","exerciseUrls","exercisePromises","length","parseExercise","exerciseObjects","exerciseUrl","grabExerciseData","exerciseObject","title","getExerciseTitle","slug","slugify","description","getExerciseDescription","taxonomies","getExerciseTaxonomies","steps","getExerciseSteps","images","getExerciseImages","children","first","index","element","splitFields","replace","split","Array","isArray","smallFormat","mediumFormat","largeFormat","imageUrls","eq","filename","photos","flatPhotosArray","z","downloadPhotos","readFile","callback","file","shift","head","res","headers","pipe","createWriteStream","on","directory","path","segment","slice","join","existsSync","mkdirSync","outputFilename","writeFile","JSON","stringify","toString","toLowerCase"],"mappings":"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","file":"EverkineticParser.js","sourcesContent":["var request = require('request');\nvar fs = require('fs');\nvar cheerio = require('cheerio');\nvar rp = require('request-promise');\n\nexport class EverkineticParser {\n\n    constructor() {\n        this.url = 'http://db.everkinetic.com';\n        this.imagePath = './assets/exercises/images/';\n        this.mkdirSyncRecursive(this.imagePath);\n\n        this.rpOptions = {\n            uri: this.url,\n            simple: true,\n            transform: function (body) {\n                return cheerio.load(body);\n            }\n        };\n    }\n\n    crawl() {\n        console.log(`Start crawrling ${this.url}`);\n\n        return new Promise((resolve, reject) => {\n\n            this.getTotalPages().then((output) => {\n\n                let totalPages = output.pages;\n                // let totalPages = 1; //debug\n\n                this.getPagesExercises(totalPages)\n                    .then((output) => {\n                        resolve(output);\n                        this.getPhotos(output);\n                        this.writeOutputToJSON();\n                    })\n                    .catch((err) => {\n                        reject(err.statusCode);\n                    })\n            });\n\n        });\n\n    }\n\n    getTotalPages() {\n        return new Promise((resolve, reject) => {\n            rp(this.rpOptions)\n                .then(($) => {\n\n                    const totalPages = Number($('.page-numbers').not('.next').last().text());\n\n                    console.log(`Found ${totalPages} pages to crawl`);\n\n                    resolve({\n                        pages: totalPages\n                    });\n                })\n                .catch((err) => {\n                    reject(err.statusCode);\n                })\n        });\n    }\n\n    getPagesExercises(pages) {\n\n        let pagePromises = [];\n        for (let i = 1; i <= pages; i++) {\n            pagePromises.push(this.getExercisesForPage(i))\n        }\n\n        return Promise.all(pagePromises).then(values => {\n            const exercisesUrls = values.reduce((a, b) => a.concat(b), []);\n            return this.parseExercises(exercisesUrls);\n        });\n    }\n\n    getExercisesForPage(pageNum) {\n\n        this.rpOptions.uri = `${this.url}/page/${pageNum}`;\n\n        return new Promise((resolve, reject) => {\n            rp(this.rpOptions)\n                .then(($) => {\n                    let pageExercisesUrls = [];\n                    $('article').each(function (i) {\n                        pageExercisesUrls[i] = $(this).find('h3').find('a').attr('href');\n                    });\n                    resolve(pageExercisesUrls);\n                })\n                .catch(function (err) {\n                    reject(err);\n                });\n        });\n\n    }\n\n    parseExercises(exerciseUrls) {\n        let exercisePromises = [];\n\n        for (let i = 0; i < exerciseUrls.length; i++) {\n            exercisePromises.push(this.parseExercise(exerciseUrls[i]));\n        }\n\n        return Promise.all(exercisePromises).then(exerciseObjects => {\n            return exerciseObjects;\n        });\n\n    }\n\n    parseExercise(exerciseUrl) {\n        return new Promise((resolve, reject) => {\n            rp({\n                uri: exerciseUrl,\n                transform: function (body) {\n                    return cheerio.load(body);\n                }\n            })\n                .then(($) => {\n                    resolve(this.grabExerciseData($));\n                })\n                .catch(function (err) {\n                    reject(err);\n                });\n        });\n    }\n\n    grabExerciseData($) {\n        const exerciseObject = {};\n\n        exerciseObject.title = this.getExerciseTitle($);\n        exerciseObject.slug = this.slugify(exerciseObject.title);\n        exerciseObject.description = this.getExerciseDescription($);\n        exerciseObject.taxonomies = this.getExerciseTaxonomies($);\n        exerciseObject.steps = this.getExerciseSteps($);\n        exerciseObject.images = this.getExerciseImages($, exerciseObject);\n\n        console.log(`Grabbed data for exercise ${exerciseObject.title}`);\n\n        return exerciseObject;\n    }\n\n    getExerciseTitle($) {\n        return $('.entry-title').find('a').text();\n    }\n\n    getExerciseDescription($) {\n        return $('.exercise-entry-content').children().first().text();\n    }\n\n    getExerciseTaxonomies($) {\n        const taxonomies = {};\n\n        $('.exercise-taxonomies').find('a').each((index, element) => {\n            const splitFields = $(element).attr('href').replace(`${this.url}/`, '').split('/');\n\n            if (splitFields[0] === 'equipment') {\n                if (Array.isArray(taxonomies[splitFields[0]])) {\n                    taxonomies[splitFields[0]].push(splitFields[1]);\n                } else {\n                    taxonomies[splitFields[0]] = [splitFields[1]];\n                }\n\n            } else {\n                taxonomies[splitFields[0]] = splitFields[1];\n            }\n\n        });\n\n        return taxonomies;\n    }\n\n    getExerciseSteps($) {\n\n        let steps = [];\n\n        $('.exercise-entry-content').find('ol').children().each((index, element) => {\n            steps.push($(element).text())\n        });\n\n        return steps;\n    }\n\n    getExerciseImages($, exerciseObject) {\n\n        const smallFormat = 0, mediumFormat = 1, largeFormat= 2; //some large images are not available while medium are\n\n        let imageUrls = [];\n\n        $('.download-exercise-images').children().eq(mediumFormat).find('a').each((index, element) => {\n\n            imageUrls.push({\n                url: $(element).attr('href'),\n                filename: `${this.imagePath}${exerciseObject.slug}-${index}.png`\n            });\n\n        });\n\n        return imageUrls;\n    }\n\n    getPhotos(photos) {\n\n        let flatPhotosArray = [];\n\n        for (let i = 0; i < photos.length; i++) {\n            for (let z = 0; z < photos[i].images.length; z++) {\n                flatPhotosArray.push(photos[i].images[z]);\n            }\n        }\n\n        this.downloadPhotos(flatPhotosArray);\n    }\n\n    downloadPhotos(flatPhotosArray) {\n\n        let readFile = function (callback) {\n            if (flatPhotosArray.length > 0) {\n                let file = flatPhotosArray.shift(),\n                    uri = file.url,\n                    filename = file.filename;\n\n                request.head(uri, function (err, res, body) {\n\n                    if (err || !res) {\n                        console.log('no res', err);\n                        return;\n                    }\n\n                    if (res.headers['content-length'] === 0 || res.headers['content-type'] !== 'image/png') {\n                        console.log('no data for image', filename);\n                        return;\n                    }\n\n                    request(uri).pipe(fs.createWriteStream(filename)).on('close', () => {\n                        console.log('Downloading exercise image ' + filename);\n                        readFile(callback);\n                    });\n\n                });\n\n            } else {\n                callback();\n            }\n        };\n\n        readFile(function () {\n            console.log('There are no more exercise images to download');\n        });\n    }\n\n    mkdirSyncRecursive(directory) {\n        let path = directory.replace(/\\/$/, '').split('/');\n\n        for (let i = 1; i <= path.length; i++) {\n            let segment = path.slice(0, i).join('/');\n            !fs.existsSync(segment) ? fs.mkdirSync(segment) : null;\n        }\n    }\n\n    writeOutputToJSON(output){\n        const outputFilename = 'exercises-output.json';\n        fs.writeFile(outputFilename, JSON.stringify(output, null, 4), err => {\n            if(err) {\n                console.log(err);\n            } else {\n                console.log(`JSON saved to ${outputFilename}`);\n            }\n        });\n    }\n\n    slugify(text) {\n        return text.toString().toLowerCase()\n            .replace(/\\s+/g, '-')           // Replace spaces with -\n            .replace(/[^\\w\\-]+/g, '')       // Remove all non-word chars\n            .replace(/\\-\\-+/g, '-')         // Replace multiple - with single -\n            .replace(/^-+/, '')             // Trim - from start of text\n            .replace(/-+$/, '');            // Trim - from end of text\n    }\n}\n"]}